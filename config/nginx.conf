user nginx;
worker_processes auto;
worker_rlimit_nofile 65535;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 10240;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    '$request_time $upstream_response_time $pipe';

    log_format json_combined escape=json
                '{'
                    '"time_local":"$time_local",'
                    '"remote_addr":"$remote_addr",'
                    '"remote_user":"$remote_user",'
                    '"request":"$request",'
                    '"status": "$status",'
                    '"body_bytes_sent":"$body_bytes_sent",'
                    '"request_time":"$request_time",'
                    '"http_referrer":"$http_referer",'
                    '"http_user_agent":"$http_user_agent",'
                    '"upstream_addr":"$upstream_addr",'
                    '"upstream_response_time":"$upstream_response_time"'
                '}';

    access_log /var/log/nginx/access.log json_combined;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 10000;
    types_hash_max_size 2048;
    server_tokens off;
    client_max_body_size 20m;
    client_body_buffer_size 128k;

    # 安全相关配置
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Frame-Options SAMEORIGIN;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # Gzip压缩
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/json application/xml application/xml+rss application/x-javascript application/x-httpd-php;
    gzip_disable "MSIE [1-6]\.(?!.*SV1)";

    # Nacos集群负载均衡配置
    upstream nacos-cluster {
        server 192.168.100.11:8848 weight=1 max_fails=2 fail_timeout=10s;
        server 192.168.100.12:8848 weight=1 max_fails=2 fail_timeout=10s;
        server 192.168.100.13:8848 weight=1 max_fails=2 fail_timeout=10s;
        
        # 健康检查和连接优化
        keepalive 32;
        keepalive_requests 1000;
        keepalive_timeout 60s;
        
        # 负载均衡算法
        least_conn;
    }

    # HTTP服务器配置
    server {
        listen 8080;
        server_name _;

        # 客户端最大请求体大小
        client_max_body_size 50M;
        
        # 超时配置
        proxy_connect_timeout 5s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        proxy_buffer_size 64k;
        proxy_buffers 4 64k;
        proxy_busy_buffers_size 128k;
        proxy_temp_file_write_size 128k;

        # 请求限制
        limit_conn_zone $binary_remote_addr zone=conn_zone:10m;
        limit_conn conn_zone 100;
        limit_req_zone $binary_remote_addr zone=req_zone:10m rate=10r/s;
        limit_req zone=req_zone burst=20 nodelay;

        # Nacos控制台
        location /nacos/ {
            proxy_pass http://nacos-cluster;
            proxy_set_header Host $host:$server_port;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Port $server_port;
            
            # WebSocket支持
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # 缓存配置
            proxy_cache_bypass $http_upgrade;
            proxy_buffering on;
        }

        # API接口
        location /nacos/v1/ {
            proxy_pass http://nacos-cluster;
            proxy_set_header Host $host:$server_port;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Port $server_port;
            
            # 对API请求的特殊处理
            proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
            proxy_next_upstream_timeout 2s;
            proxy_next_upstream_tries 3;
        }

        # 健康检查端点
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # 监控指标
        location /metrics {
            proxy_pass http://nacos-cluster/nacos/actuator/prometheus;
            proxy_set_header Host $host:$server_port;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # 错误页面
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }

    # HTTPS服务器配置 (需要配置SSL证书)
    server {
        listen 443 ssl;
        server_name _;
        
        # SSL配置 (需要提前准备证书文件)
        # ssl_certificate /etc/nginx/ssl/nacos.crt;
        # ssl_certificate_key /etc/nginx/ssl/nacos.key;
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:50m;
        ssl_session_tickets off;
        
        # 现代TLS配置
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
        ssl_prefer_server_ciphers on;
        
        # OCSP Stapling
        ssl_stapling on;
        ssl_stapling_verify on;
        
        # 其他配置与HTTP服务器相同
        location /nacos/ {
            proxy_pass http://nacos-cluster;
            proxy_set_header Host $host:$server_port;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Port $server_port;
            
            # WebSocket支持
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
        
        # 其他location配置与HTTP服务器相同
    }

    # 默认HTTP重定向到HTTPS (取消注释以启用HTTPS)
    server {
        listen 80;
        server_name _;
        # 启用HTTPS后取消下面注释
        # return 301 https://$host:443/nacos/;
        
        # 暂时重定向到HTTP
        return 301 http://$host:8080/nacos/;
    }
}